load("~/my_prepare/lfr_finally/Breastcancer_EMBOJ/emboj_预后模型毕业/101机器学习/Mime1包/mydata/GSE58812_清洗好的data.Rdata")
load("~/my_prepare/lfr_finally/Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/分型信息.Rdata")
# load("~/my_prepare/lfr_finally/Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/inputgene_24_7_19.Rdata")
exp_filter=exp
exp_filter[1:4,1:4]

m.mad <- apply(exp_filter,1,mad)
dataExprVar <- exp_filter[which(m.mad >
                                  max(quantile(m.mad, probs=seq(0, 1, 0.25))[2],0.01)),]
data.mat=t(dataExprVar)
dim(data.mat) # [1]  107 15141
# 要更改为行为样本，列为基因
# 然后只保留MP相关基因
data.mat=data.mat[,colnames(data.mat)%in%geneset1$gene]
dim(data.mat) # [1]  107 319

# 下面过滤异常样本
library(WGCNA)

gsg <- goodSamplesGenes(data.mat, verbose = 3)
gsg$allOK
# TRUE
# 如果返回为true,证明没有缺失值，可以直接进行下一步
# 如果为false,则需要用以下代码进行删除缺失值
# 如果存在异常样本或基因
if (!gsg$allOK) {
  # 异常的基因
  if (sum(!gsg$goodGenes)>0) 
    printFlush(paste("Removing genes:", 
                     paste(names(data.mat)[!gsg$goodGenes], collapse = ",")));
  # 异常的样本
  if (sum(!gsg$goodSamples)>0) 
    printFlush(paste("Removing samples:", 
                     paste(rownames(data.mat)[!gsg$goodSamples], collapse = ",")));
  # 删除异常的样本和基因
  data.mat = data.mat[gsg$goodSamples, gsg$goodGenes]
}

# 下一步：聚类所有样本，观察是否有离群样本或者异常样本
# 删除剪切线以下的样本，查看图片，选取离群值
# 如果不想删除可以将cutHeight设置高些
# 绘制样本聚类图
sampleTree <- hclust(dist(data.mat), method = "average")
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="")

# 根据上图，设置一个剪切线，将离群样本删除
# Plot a line to show the cut
abline(h = 25, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 25, minSize = 10)
table(clust)
# clust
# 0   1 
# 5 102
# 赋值，省的后面改代码
datExpr0=data.mat
outSamples <- datExpr0[(clust==0),]
rownames(outSamples)
# [1] "GSM1419983" "GSM1419984" "GSM1420014"

# clust 1 contains the samples we want to keep.
keepSamples <- (clust==1)
datExpr <- datExpr0[keepSamples, ]
sampleTree2 <- hclust(dist(datExpr), method = "average");
par(cex = 0.5);
par(mar = c(0,6,2,0))
plot(sampleTree2, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
     cex.axis = 1.5, cex.main = 2)


# 加入临床特征，前面准备好了
# 有一点需要注意，这里能作为输入的必须为数值型特征。
# 把high改为1，low改为0
head(a)
# a=a[,-1]
#            MP_score MP_group
# GSM1419942 2.548510     high
# GSM1419943 2.216109      low
# GSM1419944 2.081702      low
# GSM1419945 2.649311     high
# GSM1419946 2.475124     high
# GSM1419947 2.511488     high
a$group=NA
a$group[which(str_detect(a$MP_group, "^high"))] <- "1"
a$group[which(str_detect(a$MP_group, "^low"))] <- "0"
table(a$group)
# 0  1 
# 54 53
datTraits=a
datTraits[,3]=as.numeric(datTraits[,3])
head(datTraits)
#            MP_score MP_group group
# GSM1419942 2.548510     high     1
# GSM1419943 2.216109      low     0
# GSM1419944 2.081702      low     0
# GSM1419945 2.649311     high     1
# GSM1419946 2.475124     high     1
# GSM1419947 2.511488     high     1
#
identical(rownames(datExpr),rownames(datTraits))
#
datTraits=datTraits[rownames(datTraits)%in%rownames(datExpr),]
identical(rownames(datExpr),rownames(datTraits))
# [1] FALSE
# datExpr=datExpr[rownames(datExpr)%in%rownames(datTraits),]
# identical(rownames(datExpr),rownames(datTraits))
# # [1] TRUE
datTraits=datTraits[3]
rownames(datTraits)
# collectGarbage()
# 增加性状信息后，再次聚类
sampleTree2=hclust(dist(datExpr),method = "average")
# 绘图
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors <- numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(datTraits),
                    main = "Sample dendrogram and trait heatmap")

save(datExpr0,datExpr, datTraits, file = "../../Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/GEO-01-dataInput.RData")




# 2、网路构建和模块检测
# 2.1 选择软阈值
# 使用函数**pickSoftThreshold()**选择适当的软阈值。
rm(list = ls())
options(stringsAsFactors = F)

library(WGCNA)

load("~/my_prepare/lfr_finally/Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/GEO-01-dataInput.RData")

# Choose a set of soft-thresholding powers
powers <- c(c(1:10), seq(from = 12, to=20, by=2))

# Call the network topology analysis function
sft <- pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)

# Plot the results:
par(mar = c(3,6,2,1))
par(mfrow = c(1,2))
cex1 = 0.9 #可以修改
# 拟合指数与power值散点图，无标度拓扑拟合指数
# 一般选择在0.9以上的，第一个达到0.9以上的数值

# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",
     ylab="Scale Free Topology Model Fit,signed R^2",
     type="n", # n表示不绘图
     main = paste("Scale independence"))

text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers, cex=cex1, col="red")

# best
sft$powerEstimate
# this line corresponds to using an R^2 cut-off of h
abline(h=0.9,col="red") # 这边h设置为cex1的值

# 越平滑越好
# 平均连通性与power值散点图
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",
     ylab="Mean Connectivity", 
     type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
abline(h=10,col="red")
# 其中sft$powerEstimate是推荐的最优软阈值，最优值为4。左图y轴是无标度拓扑拟合指数，右图y轴是平均连通度。
# 其中横坐标为软阈值的梯度，第一幅图的纵坐标为无标度网络适应系数，越大越好；第二幅图的纵坐标为节点的平均连通度，越小越好。
sft$powerEstimate
## 如果推荐的最优软阈值为NA，则表面系统无法给出合适的软阈值，这时候就需要自己挑选软阈值。
sft
softpower=sft$powerEstimate
adjacency=adjacency(datExpr,power = softpower)
softpower


# TOM矩阵
TOM=TOMsimilarity(adjacency)
dissTOM=1-TOM
# 基因聚类
geneTree=hclust(as.dist(dissTOM),method = "average")
plot(geneTree,xlab="",sub="",main="Gene clustering on TOM-based dissimilarity",
     labels=FALSE,hang=0.04)
# 动态剪切模块识别
minModuleSize=20 # 最小单个模块包含的基因数
dynamicMods=cutreeDynamic(dendro = geneTree,distM = dissTOM,
                          deepSplit = 2,pamRespectsDendro = FALSE,
                          minClusterSize = minModuleSize)
table(dynamicMods)
dynamicColors=labels2colors(dynamicMods)
table(dynamicColors)
plotDendroAndColors(geneTree,dynamicColors,"Dynamic Tree Cut",
                    dendroLabels = FALSE,hang=0.1,
                    addGuide = TRUE,guideHang = 0.1,
                    main="Gene dendrogram and module colors")

net <- blockwiseModules(datExpr, power = 3,
                        maxBlockSize = 2000,# 最大模块数量
                        TOMType = "unsigned", 
                        minModuleSize = 20, #用于模块检测的最小模块尺
                        reassignThreshold = 0, 
                        mergeCutHeight = 0.25, # 用于模块合并的树形图切割高度
                        numericLabels = TRUE, pamRespectsDendro = FALSE,
                        saveTOMs = TRUE,
                        saveTOMFileBase = "../../../Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/TNBCTOM",
                        verbose = 3)
# minModuleSize表示用于模块检测的最小模块尺寸。mergeCutHeight表示用于模块合并的树形图切割高度。这两个值越大，模块越少。saveTOMFileBase用来设置数据保存位置及名称。

table(net$colors)
# 0   1 
# 91 228 
# 查看划分的模块数和每个模块里面包含的基因个数。0代表无法识别的基因数。
# 用于模块识别的分层聚类树形图存储在net$dendprograms[[1]]中。可以与模型颜色分配一起显示。
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors <- labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.1,
                    addGuide = TRUE, guideHang = 0.04)
# 除此之外，还有分布网络构建和模块检测，以及处理大数据集的：分块网络构建和模块检测。

# 保存参数
moduleLabels <- net$colors
moduleColors <- labels2colors(net$colors)
MEs <- net$MEs;
geneTree <- net$dendrograms[[1]];

save(MEs, moduleLabels, moduleColors, geneTree,
     file = "../../Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/GEO-02-networkConstruction-auto.RData")




# 3、将模块与表型数据关联并识别重要基因
# 3.1 模块与性状关系图
rm(list = ls())
options(stringsAsFactors = F)

library(WGCNA)

load("~/my_prepare/lfr_finally/Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/GEO-01-dataInput.RData")
load("~/my_prepare/lfr_finally/Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/GEO-02-networkConstruction-auto.RData")

# Define numbers of genes and samples
nGenes <- ncol(datExpr)
nSamples <- nrow(datExpr)

# Recalculate MEs with color labels
MEs0 <- moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs <- orderMEs(MEs0)
moduleTraitCor <- cor(MEs, datTraits, use = "p");
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)

sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix <- paste(signif(moduleTraitCor, 2), "\n(",
                    signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) <- dim(moduleTraitCor)
par(mar = c(6, 10, 3, 3))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               cex.lab = 0.8,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))
# 图中展示了3个模块与1种性状的关系，其中红色代表模块与性状正相关，蓝色则代表负相关。
# 我们要选择与性状最相关的模块，那么就是MEturquoise对应的模块，其P值为0.65。

# 3、青色模块与MP评分的关系（聚类图和热图）
# 使用plotEigengeneNetworks函数再次验证青色模块与肿瘤是否有关联。
# Recalculate module eigengenes
MEs <- moduleEigengenes(datExpr, moduleColors)$eigengenes
# 注意：记得修改代码，选择你感兴趣的性状
samples <- as.data.frame(datTraits$group);
names(samples) <- "samples"
# Add the weight to existing module eigengenes
MET <- orderMEs(cbind(MEs, samples))
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,9)
par(cex = 0.9)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(4,5,1,2),
                      cex.lab = 0.8, xLabelsAngle = 90)
# 聚类图中可以看出samples与MEturquiose高度相关，在热图中青色模块与samples也有显著相关性。说明青色模块就是与肿瘤最相关的模块。
# 也可以将聚类图和热图分开展示。
# Plot the dendrogram
sizeGrWindow(6,6)
par(cex = 1.0)
plotEigengeneNetworks(MET, "Eigengene dendrogram", marDendro = c(0,4,2,0),
                      plotHeatmaps = FALSE)
# Plot the heatmap matrix (note: this plot will overwrite the dendrogram plot)
par(cex = 1.0)
plotEigengeneNetworks(MET, "Eigengene adjacency heatmap", marHeatmap = c(3,4,2,2),
                      plotDendrograms = FALSE, xLabelsAngle = 90)



# 4、青色模块中MP的GS与MM的相关性（散点图）
# 我们将基因显著性 (Gene Significance, GS) 定义为基因与性状之间相关性的（绝对值），以此量化单个基因与我们感兴趣的性状（权重）之间的关联。
# 对于每个模块，我们还定义了一个定量指标模块成员(module membership, MM），即模块特征基因与基因表达谱的相关性。这样我们就可以量化阵列上所有基因与每个模块的相似性。代码实现如下：
samples <- as.data.frame(datTraits$group);
names(samples) <- "samples"
# names (colors) of the modules
modNames <- substring(names(MEs), 3)
geneModuleMembership <- as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))

names(geneModuleMembership) <- paste("MM", modNames, sep="")
names(MMPvalue) <- paste("p.MM", modNames, sep="")
geneTraitSignificance <- as.data.frame(cor(datExpr, samples, use = "p"))
GSPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) <- paste("GS.", names(samples), sep="")
names(GSPvalue) <- paste("p.GS.", names(samples), sep="")
# 注意：其中前两行用来选择你感兴趣的性状，记得修改成对应的数据。
# 针对感兴趣的模块，将GS与MM值可视化，代码如下：
modNames
# [1] "blue"      "grey"      "turquoise"
module <- "blue"
column <- match(module, modNames);
moduleGenes <- moduleColors==module;
sizeGrWindow(7, 7);
par(mfrow = c(1,1));
# [1] "#E64B35E5" "#4DBBD5E5" "#00A087E5" "#3C5488E5" "#F39B7FE5" "#8491B4E5" "#91D1C2E5"
# [8] "#DC0000E5" "#7E6148E5" "#B09C85E5"
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                   abs(geneTraitSignificance[moduleGenes, 1]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = "Gene significance for sample type",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "#029AE5E5")
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                   abs(geneTraitSignificance[moduleGenes, 1]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = "Gene significance for sample type",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "turquoise")

# 注意：module对应的是你感兴趣模块的颜色，记得修改图中的文字。
# 再注意：verboseScatterplot函数中的col本来是“col = module”，但是由于黄色太不明显了，我就用另一种黄色代替了。

# 图中的每一个点代表一个基因。显然，图中GS 和 MM 高度相关，说明与肿瘤高度显著相关的基因往往也是黄色模块中最重要（核心）的元素。

# 
# 5、保存与肿瘤最相关的基因
colnames(datExpr)
table(moduleGenes)
sel_genes1 <- colnames(datExpr)[moduleColors=="turquoise"]
sel_genes2 <- colnames(datExpr)[moduleColors=="blue"]
# write.table(sel_genes, file = "../../../../Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/module_gene_name.txt", quote = F, 
#             row.names = F,col.names = F)
sel_genes=c(sel_genes1,sel_genes2)
save(sel_genes,sel_genes1,sel_genes2,file = "../../Breastcancer_EMBOJ/emboj_预后模型毕业/wgcna/new/最相关模块基因.Rdata")
